# -*- coding: utf-8 -*-
"""NLTK Chatboat in Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12wDxqPUc4El--lbxZsUVtHA6AM3ecK3I
"""

import numpy as np
import nltk
import string
import random

"""Reading the Corpus Of Text"""

from google.colab import files
uploaded = files.upload()

f = open('/content/data.txt','r',errors = 'ignore')
raw_doc = f.read()

from google.colab import drive
drive.mount('/content/drive')

import nltk

nltk.download('punkt')
nltk.download('punkt_tab') # Download the punkt_tab resource
nltk.download('wordnet')
nltk.download('omw-1.4')

raw_doc = raw_doc.lower()#Converting entire text into lower case
sentence_tokens = nltk.sent_tokenize(raw_doc)
word_tokens = nltk.word_tokenize(raw_doc)

"""After Tokenization"""

sentence_tokens[:5]

word_tokens[:5]

"""Performing Text-PreProcessing Steps"""

lemmer = nltk.stem.WordNetLemmatizer()
def LemTokens(tokens):
  return [lemmer.lemmatize(token) for token in tokens]
remove_punct_dict = dict((ord(punct),None) for punct in string.punctuation)
def LemNormalize(text):
  return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

"""Define Greeting Functions"""

greet_inputs = ('hello','hi','greetings','Whassup','hey')
greet_responses = ('hi','hey','Hey There!','hi there','hello')

def greet(sentence):
  for word in sentence.split():
    if word.lower() in greet_inputs:
      return random.choice(greet_responses)

"""Response Generated By the Bot"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def responses(user_response):
  robo1_response = ''
  TfidfVec = TfidfVectorizer(tokenizer=LemNormalize,stop_words='english')
  tfidf = TfidfVec.fit_transform(sentence_tokens)
  vals = cosine_similarity(tfidf[-1],tfidf)
  idx = vals.argsort()[0][-2]
  flat = vals.flatten()
  flat.sort()
  req_tfidf = flat[-2]
  if req_tfidf == 0:
    robo1_response = robo1_response + "I am sorry! I don't understand you"
    return robo1_response
  else:
    robo1_response = robo1_response + sentence_tokens[idx]
    return robo1_response

"""Defining the Chatflow"""

flag = True
print('Hello! I am the Learning Bot. Start typing your text after greeting to talk to me. For ending convo type bye!')
while (flag == True):
  user_response = input()
  user_response = user_response.lower()
  if user_response != 'bye':
    if user_response == 'thanks' or user_response == 'thank you':
      flag = False
      print('Learning Bot: You are welcome!')
    else:
      if greet(user_response) != None:
        print('Learning Bot: ' + greet(user_response))
      else:
        sentence_tokens.append(user_response)
        word_tokens = word_tokens + nltk.word_tokenize(user_response)
        final_words = list(set(word_tokens))
        print('Learning Bot: ',end='')
        print(responses(user_response))
        sentence_tokens.remove(user_response)
  else:
    flag = False
    print('Learning Bot: Goodbye! Have a nice day!')